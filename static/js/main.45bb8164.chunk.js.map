{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/homepage/homepage.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","Homepage","event","setState","searchField","target","value","state","title","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","DetailsPage","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"kWAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACR,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,YCLXC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAACN,GAClB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNvBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBAAOC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCuCJG,G,wDAvCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAmBRa,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAlBzC,EAAKC,MAAQ,CACXb,SAAU,CACR,CAACJ,GAAI,EAAGC,KAAM,gBACd,CAACD,GAAI,EAAGC,KAAM,WACd,CAACD,GAAI,EAAGC,KAAM,WAEhBa,YAAa,GACbI,MAAO,oBAVQ,E,qDAcnB,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAAUmB,S,oBAO5C,WACE,MAAuCC,KAAKP,MAArCb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YAAaI,EAA9B,EAA8BA,MACxBO,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBACpG,OACE,gCACE,6BAAKT,IACL,cAAC,EAAD,CAAWX,YAAa,kBACbC,aAAcgB,KAAKhB,eAC9B,oBAAGZ,UAAW,aAAd,6BAA4C,4BAAIkB,OAChD,cAAC,EAAD,CAAUV,SAAUqB,W,GAnCLI,c,OCDjBC,EAAc,SAACnC,GACnB,OACE,8BACE,4CAgBSoC,EAXH,SAACpC,GACX,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,cAAC,IAAD,CAAOsB,KAAK,WAAWC,UAAWJ,UCL3BK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAUC,oBAAzB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.45bb8164.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.style.css';\n\nexport const Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img alt='monster'\n           src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n      <h2 key={props.monster.id}>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  )\n}\n\n\n\n","import React from \"react\";\nimport {Card} from \"../card/card.component\";\nimport './card-list.style.css'\n\nexport const CardList = (props) => {\n  return (\n    <div className='card-list'>\n      {\n        props.monsters.map((monster) => {\n          return <Card key={monster.id} monster={monster}/>\n        })\n      }\n    </div>\n  )\n}\n\n","import React from \"react\";\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n  <input type='search'\n         className='search'\n         placeholder={placeholder}\n         onChange={handleChange}\n  />\n);","import {Component} from \"react\";\nimport {CardList} from \"../card-list/card-list.component\";\nimport {SearchBox} from \"../search-box/search-box.component\";\nimport './homepage.styles.scss';\n\nclass Homepage extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [\n        {id: 1, name: 'Frankenstein'},\n        {id: 2, name: 'Dracula'},\n        {id: 3, name: 'Zombie'},\n      ],\n      searchField: '',\n      title: 'Monsters Rolodex'\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = event => {\n    this.setState({searchField: event.target.value});\n  }\n\n  render() {\n    const {monsters, searchField, title} = this.state; //Destructuring\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div >\n        <h1>{title}</h1>\n        <SearchBox placeholder={'Search Monsters'}\n                   handleChange={this.handleChange}/>\n        <p className={'search-tag'}>Filter by Name: <i>{searchField}</i></p>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import './App.css';\nimport Homepage from \"./components/homepage/homepage.component\";\nimport {Route, Switch} from \"react-router-dom\";\n\nconst DetailsPage = (props) => {\n  return (\n    <div>\n      <h1>Monster</h1>\n    </div>\n  )\n}\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Homepage} />\n        <Route path='/details' component={DetailsPage} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}